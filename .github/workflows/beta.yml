# This is a basic workflow to help you get started with Actions

name: BetaCompiler

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the beta branch
  pull_request:
    types:
      - opened
    branches:
      - 'beta'
    paths:
      - az.avd/**

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout
      uses: actions/checkout@v2.4.0
      with:
        # Repository name with owner. For example, actions/checkout
        repository: ''
        path: 'drop'
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.3.1
      with:
        # Artifact name
        name: azModule
        path: drop
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.0
        with:
          name: azModule
      - name: Display structure of downloaded files
        run: ls -R
      - name: Install needed modules
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -ErrorAction Stop
          Install-Module Pester -ErrorAction Stop
      - name: Importing Az.Avd module
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop
      - name: PSSA check
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path ./Az.Avd/Public/*.ps1 -Recurse -Outvariable issues
              $errors   = $issues.Where({$_.Severity -eq 'Error'})
              $warnings = $issues.Where({$_.Severity -eq 'Warning'})
              if ($errors) {
                  Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
              } else {
                  Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
              }
      - name: Pester Module check
        shell: pwsh
        run: |
          $testLocation = (Join-Path -Path "./Compiler" -ChildPath "Az.Avd.Module.tests.ps1")
          Invoke-Pester -Path $testLocation -Output detailed
      - name: Pester Files check
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop
          Invoke-Pester -Path (Join-Path -Path "./Compiler" -ChildPath "Az.Avd.Files.tests.ps1") -Output detailed
      - name: Pester Functions check
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop
          Invoke-Pester -Path (Join-Path -Path "./Compiler" -ChildPath "Az.Avd.Functions.tests.ps1") -Output detailed
  release:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.0
        with:
          name: azModule
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Creating a tag based on module version
        id: generate_tag
        shell: pwsh
        run: |
          ./Compiler/Az.Avd.generate.tag.ps1
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          custom_tag: ${{ steps.generate_tag.outputs.version }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: "Configuration without Checkout"
        id: without_checkout
        uses: mikepenz/release-changelog-builder-action@develop
        with:
          toTag: v${{ steps.generate_tag.outputs.version }}
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}\n\n<details>\n<summary>Uncategorized</summary>\n\n#{{UNCATEGORIZED}}\n</details>",
              "categories": [
                {
                    "title": "## üöÄ Features",
                    "labels": ["feat"]
                },
                {
                    "title": "## üêõ Fixes",
                    "labels": ["bug"]
                },
                {
                    "title": "## üìù Refactor",
                    "labels": ["refactor"]
                },
                {
                    "title": "## üß™ Tests",
                    "labels": ["test"]
                },
                {
                    "title": "## üí¨ Other",
                    "labels": ["other"]
                },
                {
                    "title": "## üì¶ Dependencies",
                    "labels": ["dependencies"]
                }
              ]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Echo Configuration without Checkout Changelog
        env:
          CHANGELOG: ${{ steps.without_checkout.outputs.changelog }}
        run: echo "CHANGELOG"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ steps.generate_tag.outputs.version }}
          release_name: Release v${{ steps.generate_tag.outputs.version }}
          body: ${{ steps.without_checkout.outputs.changelog }}
          draft: false
          prerelease: false
