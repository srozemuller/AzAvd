# This is a basic workflow to help you get started with Actions

name: ModuleCompiler

# Controls when the workflow will run
on:
  push:
    tags:
      - '*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout
      uses: actions/checkout@v2.4.0
      with:
        # Repository name with owner. For example, actions/checkout
        repository: ''
        path: 'drop'
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.3.1
      with:
        # Artifact name
        name: azModule
        path: drop
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.0
        with:
          name: azModule
      - name: Display structure of downloaded files
        run: ls -R
      - name: Install needed modules
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -ErrorAction Stop
          Install-Module Pester -ErrorAction Stop
      - name: Importing Az.Avd module
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop
      - name: PSSA check
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path ./Az.Avd/Public/*.ps1 -Recurse -Outvariable issues
              $errors   = $issues.Where({$_.Severity -eq 'Error'})
              $warnings = $issues.Where({$_.Severity -eq 'Warning'})
              if ($errors) {
                  Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
              } else {
                  Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
              }
      - name: Pester Module check
        shell: pwsh
        run: |
          $testLocation = (Join-Path -Path "./Compiler" -ChildPath "Az.Avd.Module.tests.ps1")
          Invoke-Pester -Path $testLocation -Output detailed
      - name: Pester Files check
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop
          Invoke-Pester -Path (Join-Path -Path "./Compiler" -ChildPath "Az.Avd.Files.tests.ps1") -Output detailed
      - name: Pester Functions check
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop
          Invoke-Pester -Path (Join-Path -Path "./Compiler" -ChildPath "Az.Avd.Functions.tests.ps1") -Output detailed
  write:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.0
        with:
          name: azModule
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Install PSPlaty module
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PlatyPS -ErrorAction Stop
      - name: Generate help files
        shell: pwsh
        run: |
          ./Compiler/Az.Avd.generateHelp.ps1
      - name: Commit & Push changes
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          message: 'CommitFromGitAction'
          directory: ./Docs
          author_name: ${{ secrets.user }}
          author_email: ${{ secrets.email }}
  release:
    needs:
      - test
    uses: ./.github/workflows/release.yml
  publish:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.0
        with:
          name: azModule
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Publishing module
        shell: pwsh
        run: |
          ./Compiler/Az.Avd.publishPSgallery.ps1 -PS_GALLERY_KEY ${{ secrets.PS_GALLERY_KEY }}
