name: Deploy AVD Environment Friendly


  # Triggers the workflow after the beta workflow check is completed succesfully
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # workflow_call needed for reuse workflow
  workflow_call:
    secrets:
      CLIENT_ID:
        required: true
      CLIENT_SECRET:
        required: true
      TENANT_ID:
        required: true
      SUBSCRIPTION_ID:
        required: true

env:
  rgName: rg-avd-auto-${{ GITHUB.RUN_NUMBER }}
  location: WestEurope

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout
      uses: actions/checkout@v2.4.0
      with:
        # Repository name with owner. For example, actions/checkout
        repository: ''
        path: 'drop'
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.3.1
      with:
        # Artifact name
        name: azModule
        path: drop
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.0
        with:
          name: azModule
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Create test resource group
        id: createRg
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop
          $token = Connect-Avd -TenantId ${{ secrets.TENANT_ID }} -ClientID ${{ secrets.CLIENT_ID }} -ClientSecret ${{ secrets.CLIENT_SECRET }} -SubscriptionID ${{ secrets.SUBSCRIPTION_ID }}
          $url = "https://management.azure.com/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourcegroups/${{ env.rgName }}?api-version=2021-04-01"
          $url
          $body = @{
            location = '${{ env.location }}'
          } | ConvertTo-Json
          Invoke-WebRequest -Method "PUT" -uri $url -body $body -headers $token
      - name: Create test vnet
        id: createVnet
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop
          $token = Connect-Avd -TenantId ${{ secrets.TENANT_ID }} -ClientID ${{ secrets.CLIENT_ID }} -ClientSecret ${{ secrets.CLIENT_SECRET }} -SubscriptionID ${{ secrets.SUBSCRIPTION_ID }}
          $avdParams = Get-Content -Path ./Deploy/deploy.avd.core.json -Raw | ConvertFrom-Json -AsHashtable
          $vnetParams = $avdParams.vnet
          $url = "https://management.azure.com/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourcegroups/${{ env.rgName }}/providers/Microsoft.Network/virtualNetworks/{0}?api-version=2022-11-01" -f $vnetParams.name
          $url
          $body = @{
              location   = "${{ env.location }}"
              properties = @{
                  addressSpace = @{
                      addressPrefixes = $vnetParams.addressPrefixes
                  }
                  subnets      = @(
                      @{
                          name = $vnetParams.subnets[0].name
                          properties = @{
                              addressPrefix = $vnetParams.subnets[0].addressPrefix
                          }
                      }
                  )
              }
          } | ConvertTo-Json -Depth 5
          Invoke-WebRequest -Method "PUT" -uri $url -body $body -headers $token
      - name: Deploy AVD Core
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop
          Connect-Avd -TenantId ${{ secrets.TENANT_ID }} -ClientID ${{ secrets.CLIENT_ID }} -ClientSecret ${{ secrets.CLIENT_SECRET }} -SubscriptionID ${{ secrets.SUBSCRIPTION_ID }}
          $avdParams = Get-Content -Path ./Deploy/deploy.avd.core.json -Raw | ConvertFrom-Json -AsHashtable
          $hpParams = $avdParams.hostpool
          $appParams = $avdParams.appgroup
          $wsParams = $avdParams.workspace
          $hp = New-AvdHostpool @hpParams -ResourceGroupName ${{ env.rgName }} -Location ${{ env.location }}
          $app = New-AvdApplicationGroup @appParams -HostPoolArmPath $hp.id -ResourceGroupName ${{ env.rgName }} -Location ${{ env.location }}
          $ws = New-AvdWorkspace @wsParams -ApplicationGroupReference $app.id -ResourceGroupName ${{ env.rgName }} -Location ${{ env.location }}
      - name: Deploy AVD SessionHosts
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop
          Connect-Avd -TenantId ${{ secrets.TENANT_ID }} -ClientID ${{ secrets.CLIENT_ID }} -ClientSecret ${{ secrets.CLIENT_SECRET }} -SubscriptionID ${{ secrets.SUBSCRIPTION_ID }}
          $avdParams = Get-Content -Path ./Deploy/deploy.avd.core.json -Raw | ConvertFrom-Json -AsHashtable
          $hpParams = $avdParams.hostpool
          $appParams = $avdParams.appgroup
          $wsParams = $avdParams.workspace
          $shParams = $avdParams.sessionHosts
          $shAdditionalParams = @{
            SubnetId = "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.rgName }}/providers/Microsoft.Network/virtualNetworks/avd-auto-vnet/subnets/avd-auto-subnet"
            HostpoolName = $hpParams.HostpoolName
            ResourceGroupName = '${{ env.rgName }}'
            Location = '${{ env.location }}'
            Prefix = 'avdt${{ GITHUB.RUN_NUMBER }}'
          }
          New-AvdSessionHost @shParams @shAdditionalParams
  retrieve:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.0
        with:
          name: azModule
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Test AVD Core
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop -Verbose
          Connect-Avd -TenantId ${{ secrets.TENANT_ID }} -ClientID ${{ secrets.CLIENT_ID }} -ClientSecret ${{ secrets.CLIENT_SECRET }} -SubscriptionID ${{ secrets.SUBSCRIPTION_ID }}
          $avdParams = Get-Content -Path ./Deploy/deploy.avd.core.json -Raw | ConvertFrom-Json -AsHashtable
          $hpParams = $avdParams.hostpool
          $appParams = $avdParams.appgroup
          $wsParams = $avdParams.workspace
          $shParams = $avdParams.sessionHosts
          $hpTest = Get-AvdHostpool -hostpoolName $hpParams.HostpoolName -ResourceGroupName ${{ env.rgName }}
          $appTest = Get-AvdApplicationGroup -Name $appParams.name -ResourceGroupName ${{ env.rgName }}
          $wpTest = Get-AvdWorkspace -Name $wsParams.name -ResourceGroupName ${{ env.rgName }}
          get-avdhostpool -resourceId $hpTest.id
          if ($appTest -ne $null) {
            get-avdapplicationgroup -resourceId $appTest.id
          }
          else {
            Write-Error "Application Group not found"
          }
          $sh = Get-AvdSessionHost -hostpoolName $hpParams.HostpoolName -ResourceGroupName ${{ env.rgName }}
          if ($sh.count -eq $shParams.SessionHostCount) {
            Write-Output "Session Hosts count matches with deployment"
          }
          else {
            Write-Error "Session Hosts count does not match with deployment"
          }
  sessionHostManagement:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.0
        with:
          name: azModule
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Session host power management
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop -Verbose
          Connect-Avd -TenantId ${{ secrets.TENANT_ID }} -ClientID ${{ secrets.CLIENT_ID }} -ClientSecret ${{ secrets.CLIENT_SECRET }} -SubscriptionID ${{ secrets.SUBSCRIPTION_ID }}
          $avdParams = Get-Content -Path ./Deploy/deploy.avd.core.json -Raw | ConvertFrom-Json -AsHashtable
          $hpParams = $avdParams.hostpool
          $shParams = $avdParams.sessionHosts
          $hosts = Get-AvdSessionHost -hostpoolName $hpParams.HostpoolName -ResourceGroupName ${{ env.rgName }}
          $hosts | Foreach {
            Get-AvdSessionHostPowerState -id $_.id
            Stop-AvdSessionHost -Id $_.id -Verbose
            Start-AvdSessionHost -Id $_.id -Verbose
            Stop-AvdSessionHost -Id $_.id -Deallocate
          }
  remove:
    runs-on: ubuntu-latest
    needs: retrieve
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.0
        with:
          name: azModule
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Test AVD Core
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop -Verbose
          Connect-Avd -TenantId ${{ secrets.TENANT_ID }} -ClientID ${{ secrets.CLIENT_ID }} -ClientSecret ${{ secrets.CLIENT_SECRET }} -SubscriptionID ${{ secrets.SUBSCRIPTION_ID }}
          $avdParams = Get-Content -Path ./Deploy/deploy.avd.core.json -Raw | ConvertFrom-Json -AsHashtable
          $hpParams = $avdParams.hostpool
          $appParams = $avdParams.appgroup
          $wsParams = $avdParams.workspace
          Remove-AvdSessionHost -hostpoolName $hpParams.HostpoolName -ResourceGroupName ${{ env.rgName }} -DeleteAssociated -Force 
          Remove-AvdWorkspace -Name $wsParams.name -ResourceGroupName ${{ env.rgName }}
          Remove-AvdApplicationGroup -Name $appParams.name -ResourceGroupName ${{ env.rgName }}
          Remove-AvdHostpool -hostpoolName $hpParams.HostpoolName -ResourceGroupName ${{ env.rgName }}
      - name: Remove resource group
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop
          $token = Connect-Avd -TenantId ${{ secrets.TENANT_ID }} -ClientID ${{ secrets.CLIENT_ID }} -ClientSecret ${{ secrets.CLIENT_SECRET }} -SubscriptionID ${{ secrets.SUBSCRIPTION_ID }}
          $url = "https://management.azure.com/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourcegroups/${{ env.rgName }}?api-version=2021-04-01"
          Invoke-WebRequest -Method "DELETE" -uri $url -headers $token